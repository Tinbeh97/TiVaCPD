python3 run.py --data_path ./data/HAR --exp HAR --prefix HAR_X
python3 run.py --data_path ./data/HAR_new --exp HAR --model_type MMDATVGL_CPD --prefix HAR_X --penalty_type L1

salloc --partition=t4v2,rtx6000 --nodes=1 --ntasks=1 --gres=gpu:1 --mem=8G --time=8:00:00
salloc --nodes=1 --ntasks=1 --gres=gpu:1 --mem=12G --time=11:00:00

srun -p gpu python3 experiments.py --data_path ./data/HAR_new --exp HAR --model_type MMDATVGL_CPD --data_type HAR --penalty_type L2 --ensemble_win True
--wavelet True
srun -p gpu python3 experiments.py --data_path ./data/beedance --exp beedance --model_type MMDATVGL_CPD --data_type beedance --penalty_type L2 --ensemble_win True --score_threshold 0.005
srun -p gpu python3 experiments.py --data_path ./data/occupancy --exp occupancy --model_type MMDATVGL_CPD --data_type occupancy --penalty_type L2 --ensemble_win True

srun -p gpu python3 hyp_tune.py --data_path ./data/beedance --exp beedance --model_type MMDATVGL_CPD --data_type beedance --penalty_type L2
srun -p gpu python3 hyp_tune.py --data_path ./data/HAR_new --exp HAR --model_type MMDATVGL_CPD --data_type HAR --penalty_type L2

python3 plot_data.py --data_path ./data/block_correlation --data_type block_correlation
python3 plot_data.py --data_path ./data/changing_mean_variance_correlation --data_type simulated

srun -p gpu python3 experiments.py --data_path ./data/block_correlation --exp block --model_type MMDATVGL_CPD --data_type block_correlation --penalty_type L2 --ensemble_win True
srun -p gpu python3 experiments.py --data_path ./data/changing_mean_variance_correlation --exp simulated --model_type MMDATVGL_CPD --data_type simulated --penalty_type L2 --ensemble_win True

##run.py is for training 
##simulate.py is for simulating data -> Jumping Mean, changing_variance, changing correlation
##simulate2.py -> Arbitrary CPs
##experiments.py for evaluation part 
##performance.py contains functions for experiments.py
##I think exp_2.py is the previous version of the experiments.py
##main.py for visualizing the final scores' var, mean, and cov results 
##hyp_tune.py is for hyperparameter tuning